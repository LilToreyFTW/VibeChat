{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport apiService from '../services/api';\nexport const useSubscriptionStore = create()(persist((set, get) => ({\n  subscriptions: [],\n  availableTiers: {},\n  paymentMethods: {},\n  btcWallet: '',\n  isLoading: false,\n  error: null,\n  fetchSubscriptions: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.getMySubscriptions();\n      if (response.success && response.data) {\n        set({\n          subscriptions: response.data,\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          subscriptions: [],\n          isLoading: false,\n          error: response.message || 'Failed to fetch subscriptions'\n        });\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      set({\n        subscriptions: [],\n        isLoading: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch subscriptions'\n      });\n    }\n  },\n  fetchAvailableTiers: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.getAvailableTiers();\n      if (response.success && response.data) {\n        set({\n          availableTiers: response.data,\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          availableTiers: {},\n          isLoading: false,\n          error: response.message || 'Failed to fetch tiers'\n        });\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      set({\n        availableTiers: {},\n        isLoading: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch tiers'\n      });\n    }\n  },\n  fetchPaymentMethods: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.getPaymentMethods();\n      if (response.success && response.data) {\n        set({\n          paymentMethods: response.data,\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          paymentMethods: {},\n          isLoading: false,\n          error: response.message || 'Failed to fetch payment methods'\n        });\n      }\n\n      // Also fetch BTC wallet\n      const walletResponse = await apiService.getBTCWallet();\n      if (walletResponse.success && walletResponse.data) {\n        set({\n          btcWallet: walletResponse.data.btcWallet\n        });\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      set({\n        paymentMethods: {},\n        isLoading: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch payment methods'\n      });\n    }\n  },\n  purchaseSubscription: async data => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.purchaseSubscription(data);\n      if (response.success) {\n        // Refresh subscriptions\n        await get().fetchSubscriptions();\n        set({\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          isLoading: false,\n          error: response.message || 'Failed to purchase subscription'\n        });\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      set({\n        isLoading: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to purchase subscription'\n      });\n    }\n  },\n  cancelSubscription: async subscriptionId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.cancelSubscription(subscriptionId);\n      if (response.success) {\n        // Refresh subscriptions\n        await get().fetchSubscriptions();\n        set({\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          isLoading: false,\n          error: response.message || 'Failed to cancel subscription'\n        });\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      set({\n        isLoading: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to cancel subscription'\n      });\n    }\n  },\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  setLoading: loading => {\n    set({\n      isLoading: loading\n    });\n  }\n}), {\n  name: 'subscription-storage',\n  partialize: state => ({\n    subscriptions: state.subscriptions,\n    availableTiers: state.availableTiers\n  })\n}));","map":{"version":3,"names":["create","persist","apiService","useSubscriptionStore","set","get","subscriptions","availableTiers","paymentMethods","btcWallet","isLoading","error","fetchSubscriptions","response","getMySubscriptions","success","data","message","_error$response","_error$response$data","fetchAvailableTiers","getAvailableTiers","_error$response2","_error$response2$data","fetchPaymentMethods","getPaymentMethods","walletResponse","getBTCWallet","_error$response3","_error$response3$data","purchaseSubscription","_error$response4","_error$response4$data","cancelSubscription","subscriptionId","_error$response5","_error$response5$data","clearError","setLoading","loading","name","partialize","state"],"sources":["I:/VibeChat/frontend/src/store/subscriptionStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { Subscription, TierInfo, CreateSubscriptionRequest } from '../types';\r\nimport apiService from '../services/api';\r\n\r\ninterface SubscriptionState {\r\n  subscriptions: Subscription[];\r\n  availableTiers: Record<string, TierInfo>;\r\n  paymentMethods: Record<string, any>;\r\n  btcWallet: string;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n\r\n  // Actions\r\n  fetchSubscriptions: () => Promise<void>;\r\n  fetchAvailableTiers: () => Promise<void>;\r\n  fetchPaymentMethods: () => Promise<void>;\r\n  purchaseSubscription: (data: CreateSubscriptionRequest) => Promise<void>;\r\n  cancelSubscription: (subscriptionId: number) => Promise<void>;\r\n  clearError: () => void;\r\n  setLoading: (loading: boolean) => void;\r\n}\r\n\r\nexport const useSubscriptionStore = create<SubscriptionState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      subscriptions: [],\r\n      availableTiers: {},\r\n      paymentMethods: {},\r\n      btcWallet: '',\r\n      isLoading: false,\r\n      error: null,\r\n\r\n      fetchSubscriptions: async () => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.getMySubscriptions();\r\n\r\n          if (response.success && response.data) {\r\n            set({\r\n              subscriptions: response.data,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              subscriptions: [],\r\n              isLoading: false,\r\n              error: response.message || 'Failed to fetch subscriptions',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            subscriptions: [],\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to fetch subscriptions',\r\n          });\r\n        }\r\n      },\r\n\r\n      fetchAvailableTiers: async () => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.getAvailableTiers();\r\n\r\n          if (response.success && response.data) {\r\n            set({\r\n              availableTiers: response.data,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              availableTiers: {},\r\n              isLoading: false,\r\n              error: response.message || 'Failed to fetch tiers',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            availableTiers: {},\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to fetch tiers',\r\n          });\r\n        }\r\n      },\r\n\r\n      fetchPaymentMethods: async () => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.getPaymentMethods();\r\n\r\n          if (response.success && response.data) {\r\n            set({\r\n              paymentMethods: response.data,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              paymentMethods: {},\r\n              isLoading: false,\r\n              error: response.message || 'Failed to fetch payment methods',\r\n            });\r\n          }\r\n\r\n          // Also fetch BTC wallet\r\n          const walletResponse = await apiService.getBTCWallet();\r\n          if (walletResponse.success && walletResponse.data) {\r\n            set({\r\n              btcWallet: walletResponse.data.btcWallet,\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            paymentMethods: {},\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to fetch payment methods',\r\n          });\r\n        }\r\n      },\r\n\r\n      purchaseSubscription: async (data: CreateSubscriptionRequest) => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.purchaseSubscription(data);\r\n\r\n          if (response.success) {\r\n            // Refresh subscriptions\r\n            await get().fetchSubscriptions();\r\n            set({\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              isLoading: false,\r\n              error: response.message || 'Failed to purchase subscription',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to purchase subscription',\r\n          });\r\n        }\r\n      },\r\n\r\n      cancelSubscription: async (subscriptionId: number) => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.cancelSubscription(subscriptionId);\r\n\r\n          if (response.success) {\r\n            // Refresh subscriptions\r\n            await get().fetchSubscriptions();\r\n            set({\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              isLoading: false,\r\n              error: response.message || 'Failed to cancel subscription',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to cancel subscription',\r\n          });\r\n        }\r\n      },\r\n\r\n      clearError: () => {\r\n        set({ error: null });\r\n      },\r\n\r\n      setLoading: (loading: boolean) => {\r\n        set({ isLoading: loading });\r\n      },\r\n    }),\r\n    {\r\n      name: 'subscription-storage',\r\n      partialize: (state) => ({\r\n        subscriptions: state.subscriptions,\r\n        availableTiers: state.availableTiers,\r\n      }),\r\n    }\r\n  )\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}