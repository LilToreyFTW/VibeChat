{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport apiService from '../services/api';\nexport const useSubscriptionStore = create()(persist((set, get) => ({\n  subscriptions: [],\n  availableTiers: {},\n  isLoading: false,\n  error: null,\n  fetchSubscriptions: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.get('/subscriptions/my');\n      if (response.success && response.data) {\n        set({\n          subscriptions: response.data,\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          subscriptions: [],\n          isLoading: false,\n          error: response.message || 'Failed to fetch subscriptions'\n        });\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      set({\n        subscriptions: [],\n        isLoading: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch subscriptions'\n      });\n    }\n  },\n  fetchAvailableTiers: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.get('/subscriptions/tiers');\n      if (response.success && response.data) {\n        set({\n          availableTiers: response.data,\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          availableTiers: {},\n          isLoading: false,\n          error: response.message || 'Failed to fetch tiers'\n        });\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      set({\n        availableTiers: {},\n        isLoading: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch tiers'\n      });\n    }\n  },\n  purchaseSubscription: async data => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.post('/subscriptions/purchase', data);\n      if (response.success) {\n        // Refresh subscriptions\n        await get().fetchSubscriptions();\n        set({\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          isLoading: false,\n          error: response.message || 'Failed to purchase subscription'\n        });\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      set({\n        isLoading: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to purchase subscription'\n      });\n    }\n  },\n  cancelSubscription: async subscriptionId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await apiService.post(`/subscriptions/cancel/${subscriptionId}`);\n      if (response.success) {\n        // Refresh subscriptions\n        await get().fetchSubscriptions();\n        set({\n          isLoading: false,\n          error: null\n        });\n      } else {\n        set({\n          isLoading: false,\n          error: response.message || 'Failed to cancel subscription'\n        });\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      set({\n        isLoading: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to cancel subscription'\n      });\n    }\n  },\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  setLoading: loading => {\n    set({\n      isLoading: loading\n    });\n  }\n}), {\n  name: 'subscription-storage',\n  partialize: state => ({\n    subscriptions: state.subscriptions,\n    availableTiers: state.availableTiers\n  })\n}));","map":{"version":3,"names":["create","persist","apiService","useSubscriptionStore","set","get","subscriptions","availableTiers","isLoading","error","fetchSubscriptions","response","success","data","message","_error$response","_error$response$data","fetchAvailableTiers","_error$response2","_error$response2$data","purchaseSubscription","post","_error$response3","_error$response3$data","cancelSubscription","subscriptionId","_error$response4","_error$response4$data","clearError","setLoading","loading","name","partialize","state"],"sources":["I:/VibeChat/frontend/src/store/subscriptionStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { Subscription, TierInfo, CreateSubscriptionRequest } from '../types';\r\nimport apiService from '../services/api';\r\n\r\ninterface SubscriptionState {\r\n  subscriptions: Subscription[];\r\n  availableTiers: Record<string, TierInfo>;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n\r\n  // Actions\r\n  fetchSubscriptions: () => Promise<void>;\r\n  fetchAvailableTiers: () => Promise<void>;\r\n  purchaseSubscription: (data: CreateSubscriptionRequest) => Promise<void>;\r\n  cancelSubscription: (subscriptionId: number) => Promise<void>;\r\n  clearError: () => void;\r\n  setLoading: (loading: boolean) => void;\r\n}\r\n\r\nexport const useSubscriptionStore = create<SubscriptionState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      subscriptions: [],\r\n      availableTiers: {},\r\n      isLoading: false,\r\n      error: null,\r\n\r\n      fetchSubscriptions: async () => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.get('/subscriptions/my');\r\n\r\n          if (response.success && response.data) {\r\n            set({\r\n              subscriptions: response.data,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              subscriptions: [],\r\n              isLoading: false,\r\n              error: response.message || 'Failed to fetch subscriptions',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            subscriptions: [],\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to fetch subscriptions',\r\n          });\r\n        }\r\n      },\r\n\r\n      fetchAvailableTiers: async () => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.get('/subscriptions/tiers');\r\n\r\n          if (response.success && response.data) {\r\n            set({\r\n              availableTiers: response.data,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              availableTiers: {},\r\n              isLoading: false,\r\n              error: response.message || 'Failed to fetch tiers',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            availableTiers: {},\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to fetch tiers',\r\n          });\r\n        }\r\n      },\r\n\r\n      purchaseSubscription: async (data: CreateSubscriptionRequest) => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.post('/subscriptions/purchase', data);\r\n\r\n          if (response.success) {\r\n            // Refresh subscriptions\r\n            await get().fetchSubscriptions();\r\n            set({\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              isLoading: false,\r\n              error: response.message || 'Failed to purchase subscription',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to purchase subscription',\r\n          });\r\n        }\r\n      },\r\n\r\n      cancelSubscription: async (subscriptionId: number) => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.post(`/subscriptions/cancel/${subscriptionId}`);\r\n\r\n          if (response.success) {\r\n            // Refresh subscriptions\r\n            await get().fetchSubscriptions();\r\n            set({\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              isLoading: false,\r\n              error: response.message || 'Failed to cancel subscription',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to cancel subscription',\r\n          });\r\n        }\r\n      },\r\n\r\n      clearError: () => {\r\n        set({ error: null });\r\n      },\r\n\r\n      setLoading: (loading: boolean) => {\r\n        set({ isLoading: loading });\r\n      },\r\n    }),\r\n    {\r\n      name: 'subscription-storage',\r\n      partialize: (state) => ({\r\n        subscriptions: state.subscriptions,\r\n        availableTiers: state.availableTiers,\r\n      }),\r\n    }\r\n  )\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}