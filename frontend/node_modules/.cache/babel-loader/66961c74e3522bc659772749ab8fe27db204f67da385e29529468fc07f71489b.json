{"ast":null,"code":"import{create}from'zustand';import{persist}from'zustand/middleware';import apiService from'../services/api';export const useSubscriptionStore=create()(persist((set,get)=>({subscriptions:[],availableTiers:{},isLoading:false,error:null,fetchSubscriptions:async()=>{set({isLoading:true,error:null});try{const response=await apiService.getMySubscriptions();if(response.success&&response.data){set({subscriptions:response.data,isLoading:false,error:null});}else{set({subscriptions:[],isLoading:false,error:response.message||'Failed to fetch subscriptions'});}}catch(error){var _error$response,_error$response$data;set({subscriptions:[],isLoading:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to fetch subscriptions'});}},fetchAvailableTiers:async()=>{set({isLoading:true,error:null});try{const response=await apiService.getAvailableTiers();if(response.success&&response.data){set({availableTiers:response.data,isLoading:false,error:null});}else{set({availableTiers:{},isLoading:false,error:response.message||'Failed to fetch tiers'});}}catch(error){var _error$response2,_error$response2$data;set({availableTiers:{},isLoading:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to fetch tiers'});}},purchaseSubscription:async data=>{set({isLoading:true,error:null});try{const response=await apiService.purchaseSubscription(data);if(response.success){// Refresh subscriptions\nawait get().fetchSubscriptions();set({isLoading:false,error:null});}else{set({isLoading:false,error:response.message||'Failed to purchase subscription'});}}catch(error){var _error$response3,_error$response3$data;set({isLoading:false,error:((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to purchase subscription'});}},cancelSubscription:async subscriptionId=>{set({isLoading:true,error:null});try{const response=await apiService.cancelSubscription(subscriptionId);if(response.success){// Refresh subscriptions\nawait get().fetchSubscriptions();set({isLoading:false,error:null});}else{set({isLoading:false,error:response.message||'Failed to cancel subscription'});}}catch(error){var _error$response4,_error$response4$data;set({isLoading:false,error:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to cancel subscription'});}},clearError:()=>{set({error:null});},setLoading:loading=>{set({isLoading:loading});}}),{name:'subscription-storage',partialize:state=>({subscriptions:state.subscriptions,availableTiers:state.availableTiers})}));","map":{"version":3,"names":["create","persist","apiService","useSubscriptionStore","set","get","subscriptions","availableTiers","isLoading","error","fetchSubscriptions","response","getMySubscriptions","success","data","message","_error$response","_error$response$data","fetchAvailableTiers","getAvailableTiers","_error$response2","_error$response2$data","purchaseSubscription","_error$response3","_error$response3$data","cancelSubscription","subscriptionId","_error$response4","_error$response4$data","clearError","setLoading","loading","name","partialize","state"],"sources":["I:/VibeChat/frontend/src/store/subscriptionStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { Subscription, TierInfo, CreateSubscriptionRequest } from '../types';\r\nimport apiService from '../services/api';\r\n\r\ninterface SubscriptionState {\r\n  subscriptions: Subscription[];\r\n  availableTiers: Record<string, TierInfo>;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n\r\n  // Actions\r\n  fetchSubscriptions: () => Promise<void>;\r\n  fetchAvailableTiers: () => Promise<void>;\r\n  purchaseSubscription: (data: CreateSubscriptionRequest) => Promise<void>;\r\n  cancelSubscription: (subscriptionId: number) => Promise<void>;\r\n  clearError: () => void;\r\n  setLoading: (loading: boolean) => void;\r\n}\r\n\r\nexport const useSubscriptionStore = create<SubscriptionState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      subscriptions: [],\r\n      availableTiers: {},\r\n      isLoading: false,\r\n      error: null,\r\n\r\n      fetchSubscriptions: async () => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.getMySubscriptions();\r\n\r\n          if (response.success && response.data) {\r\n            set({\r\n              subscriptions: response.data,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              subscriptions: [],\r\n              isLoading: false,\r\n              error: response.message || 'Failed to fetch subscriptions',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            subscriptions: [],\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to fetch subscriptions',\r\n          });\r\n        }\r\n      },\r\n\r\n      fetchAvailableTiers: async () => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.getAvailableTiers();\r\n\r\n          if (response.success && response.data) {\r\n            set({\r\n              availableTiers: response.data,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              availableTiers: {},\r\n              isLoading: false,\r\n              error: response.message || 'Failed to fetch tiers',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            availableTiers: {},\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to fetch tiers',\r\n          });\r\n        }\r\n      },\r\n\r\n      purchaseSubscription: async (data: CreateSubscriptionRequest) => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.purchaseSubscription(data);\r\n\r\n          if (response.success) {\r\n            // Refresh subscriptions\r\n            await get().fetchSubscriptions();\r\n            set({\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              isLoading: false,\r\n              error: response.message || 'Failed to purchase subscription',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to purchase subscription',\r\n          });\r\n        }\r\n      },\r\n\r\n      cancelSubscription: async (subscriptionId: number) => {\r\n        set({ isLoading: true, error: null });\r\n\r\n        try {\r\n          const response = await apiService.cancelSubscription(subscriptionId);\r\n\r\n          if (response.success) {\r\n            // Refresh subscriptions\r\n            await get().fetchSubscriptions();\r\n            set({\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n          } else {\r\n            set({\r\n              isLoading: false,\r\n              error: response.message || 'Failed to cancel subscription',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.message || 'Failed to cancel subscription',\r\n          });\r\n        }\r\n      },\r\n\r\n      clearError: () => {\r\n        set({ error: null });\r\n      },\r\n\r\n      setLoading: (loading: boolean) => {\r\n        set({ isLoading: loading });\r\n      },\r\n    }),\r\n    {\r\n      name: 'subscription-storage',\r\n      partialize: (state) => ({\r\n        subscriptions: state.subscriptions,\r\n        availableTiers: state.availableTiers,\r\n      }),\r\n    }\r\n  )\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}